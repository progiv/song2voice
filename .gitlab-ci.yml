# Сообщаем Gitlab CI, что мы будем использовать Docker при сборке.
image: docker:latest
#image: docker:19.03.1

# Описываем, из каких ступеней будет состоять наша непрерывная интеграция:
# - сборка Docker-образа,
# - прогон тестов Django,
# - выкат на боевой сервер.
stages:
  - build
  - test
  - deploy_staging
  - integration_staging
  - deploy_production
  - integration_production

variables:
  # Последний собранный образ из тех что есть в registry
  LATEST: ${CI_REGISTRY_IMAGE}:latest
  # Образ соответствующий этому коммиту
  THIS: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# Описываем инициализационные команды, которые необходимо запускать
# перед запуском каждой ступени.
# Изменения, внесённые на каждой ступени, не переносятся на другие, так как запуск
# ступеней осуществляется в чистом Docker-контейнере, который пересоздаётся каждый раз.
before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Сборка Docker-образа
build:
  stage: build
  # shared-runners отключены, поэтому тэги не нужны
  # tags:
  #    - docker,production
  script:
    - docker pull $LATEST || true
    - docker build -t song2voice --cache-from $LATEST --tag $LATEST --tag $THIS .
    # push built container to registry
    - docker push $LATEST
    - docker push $THIS

# Show some non-sensitive environment variables
show_env:
  stage: build
  script:
    - echo DEBUG=$DEBUG
    - echo DJANGO_DATABASE=$DJANGO_DATABASE
    - echo DB_HOST=$DB_HOST
    - echo CI_REGISTRY=$CI_REGISTRY

# Прогон тестов
test:
  stage: test
  script:
    # вместо повторной сборки, забираем собранный на предыдущей ступени
    # готовый образ из registry
    - docker pull $THIS
    # запускаем тесты
    - docker run -e DEBUG=True --rm $THIS python manage.py test

.deploy:
  script:
    - docker pull $THIS
    - docker stop $CONTAINER || true
    - docker rm $CONTAINER || true
    - docker run --env-file $ENV_LIST -dp $PORT:80 --name $CONTAINER $THIS
    # remember which container was run last for this environment
    - docker tag $THIS $CI_REGISTRY_IMAGE:$CONTAINER
    - docker push $CI_REGISTRY_IMAGE:$CONTAINER


# Запуск в Staging
deploy_staging:
  extends: .deploy
  stage: deploy_staging
  environment:
    name: Staging
  variables:
    CONTAINER: back_staging
    PORT: 8000

# Обновление продакшн
deploy_production:
  stage: deploy_production
  extends: .deploy
  # Запускать только по кнопке. Сначала убедись, что Staging корректно работает.
  when: manual
  only:
    - master
  environment:
    name: Production
  variables:
    CONTAINER: back
    PORT: 80

# TODO: disable before_script for these steps
.integration_test:
  variables:
    folder: integration_test
    environment_json: ${folder}/${environment_name}.postman_environment.json
    collection: ${folder}/musicbreaker_back.postman_collection.json
  script:
    - apk add --update npm
    - npm install -g newman
    - newman run --working-dir=$folder --verbose -e $environment_json $collection

integration_test_staging:
  stage: integration_staging
  extends: .integration_test
  variables:
    environment_name: staging
  needs: [deploy_staging]

integration_test_production:
  stage: integration_production
  extends: .integration_test
  variables:
    environment_name: api.musicbreaker.us
  only:
    - master
  needs: [deploy_production]